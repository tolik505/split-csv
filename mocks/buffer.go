// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Buffer is an autogenerated mock type for the Buffer type
type Buffer struct {
	mock.Mock
}

type Buffer_Expecter struct {
	mock *mock.Mock
}

func (_m *Buffer) EXPECT() *Buffer_Expecter {
	return &Buffer_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function with given fields:
func (_m *Buffer) Bytes() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Buffer_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type Buffer_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *Buffer_Expecter) Bytes() *Buffer_Bytes_Call {
	return &Buffer_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *Buffer_Bytes_Call) Run(run func()) *Buffer_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Buffer_Bytes_Call) Return(_a0 []byte) *Buffer_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

// Len provides a mock function with given fields:
func (_m *Buffer) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Buffer_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type Buffer_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *Buffer_Expecter) Len() *Buffer_Len_Call {
	return &Buffer_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *Buffer_Len_Call) Run(run func()) *Buffer_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Buffer_Len_Call) Return(_a0 int) *Buffer_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

// ReadBytes provides a mock function with given fields: delim
func (_m *Buffer) ReadBytes(delim byte) ([]byte, error) {
	ret := _m.Called(delim)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(byte) []byte); ok {
		r0 = rf(delim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(byte) error); ok {
		r1 = rf(delim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buffer_ReadBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBytes'
type Buffer_ReadBytes_Call struct {
	*mock.Call
}

// ReadBytes is a helper method to define mock.On call
//   - delim byte
func (_e *Buffer_Expecter) ReadBytes(delim interface{}) *Buffer_ReadBytes_Call {
	return &Buffer_ReadBytes_Call{Call: _e.mock.On("ReadBytes", delim)}
}

func (_c *Buffer_ReadBytes_Call) Run(run func(delim byte)) *Buffer_ReadBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *Buffer_ReadBytes_Call) Return(line []byte, err error) *Buffer_ReadBytes_Call {
	_c.Call.Return(line, err)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *Buffer) Reset() {
	_m.Called()
}

// Buffer_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Buffer_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *Buffer_Expecter) Reset() *Buffer_Reset_Call {
	return &Buffer_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *Buffer_Reset_Call) Run(run func()) *Buffer_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Buffer_Reset_Call) Return() *Buffer_Reset_Call {
	_c.Call.Return()
	return _c
}

// Write provides a mock function with given fields: p
func (_m *Buffer) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buffer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Buffer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *Buffer_Expecter) Write(p interface{}) *Buffer_Write_Call {
	return &Buffer_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *Buffer_Write_Call) Run(run func(p []byte)) *Buffer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Buffer_Write_Call) Return(n int, err error) *Buffer_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

type mockConstructorTestingTNewBuffer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuffer creates a new instance of Buffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuffer(t mockConstructorTestingTNewBuffer) *Buffer {
	mock := &Buffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
